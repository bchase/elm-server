#!/usr/bin/env node

const _ = require('lodash')
const http = require('http')
const url = require('url')
const qs = require('query-string')

const Elm  = require('./elm.js')


const port = process.argv[2] || "8080"

const config = { env: 'dev' }

const server = function(cfg, req, body, callback) {
  const buildConn = (cfg, rawReq) => {
    const { headers, method } = rawReq
    const { pathname, query } = url.parse(rawReq.url)

    const req = {
      headers: _.toPairs(headers),
      queryParams: _.toPairs(qs.parse(query)),
      method, pathname, body,
    }

    return { cfg, req }
  }

  const elm = Elm.Main.worker(buildConn(cfg, req))
  elm.ports.respond.subscribe(callback)
}



// https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/
http.createServer((req, resp) => {
  const error = (err) => { console.error(err) } // TODO

  let body = []
  req
    .on('error', error)
    .on('data', (chunk) => { body.push(chunk) })
    .on('end', () => {
      body = Buffer.concat(body).toString()
      resp.on('error', error)
      server(config, req, body, ({ status, headers, body }) => {
        resp.writeHead(status, headers)
        resp.end(body)
      })
    })
}).listen(port)
